/*
*****************************************************************************************
    Name        : CreateAccountfromEBSTest 
                            
---------------------------------------------------------------------------
 Developer              Date            Description
---------------------------------------------------------------------------
 P M Mamata           19/07/2015          Created
*****************************************************************************************
*/

@isTest(seealldata = true)
private class CreateAccountfromEBSTest {
    static testmethod void testCreateAccountfromEBSCreate(){
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        CreateAccountfromEBS.ResponseWrapper crw = new CreateAccountfromEBS.ResponseWrapper(); 
        CreateAccountfromEBS.RequestContactData crc= new CreateAccountfromEBS.RequestContactData();
        CreateAccountfromEBS.RequestAddressData cra = new CreateAccountfromEBS.RequestAddressData();                   
        
        GenerateTestData.createAccount();
         
        cr.AccountID = '';
        cr.AccountName = 'Test Account';
        cr.CollectorName = 'test collector name';
        cr.Email = 'test.email@gmail.com';
        cr.DUNS = 'test duns';
        cr.PrimaryRegion = 'test primary region'; 
        cr.RestrictedPartyIndicator = 'test RestrictedPartyIndicator';
        cr.DoNotMerge = true;
        cr.FchReportingEntityPartyID = '123';
        cr.VerticalClassification = 'VerticalClassification'; 
        cr.CreditStatus = 'CreditStatus';
        cr.EnterpriseAccountNumber = '12345';
        cr.FchPartyID = 'test Id'; 
        cr.FchReportingEntityNumber = 'FchReportingEntityNumber';
        cr.EBSPaymentTerm = 'EBSPaymentTerm';
        CreateAccountfromEBS.RequestAddressData rad = new CreateAccountfromEBS.RequestAddressData();
        cr.addresses = new List<CreateAccountfromEBS.RequestAddressData>();
        cr.addresses.add(rad);
        CreateAccountfromEBS.RequestContactData rcd = new CreateAccountfromEBS.RequestContactData();
        cr.contacts = new List<CreateAccountfromEBS.RequestContactData>();
        cr.contacts.add(rcd);
        cr.IsDeleted = 'IsDeleted';
        cr.Country = 'test country';
        cr.GlobalOptput = 'GlobalOptput';
        cr.LifeCycelstage = 'LifeCycelstage';
        cr.CustomerType = 'CustomerType';
        cr.SalesRepBusinessArea = 'SalesRepBusinessArea';
        cr.SalesRepUserDivision = 'SalesRepUserDivision';
        cr.SalesRepLegalEntity = 'SalesRepLegalEntity';
        cr.SalesRepSalesRegion = 'SalesRepSalesRegion';
        cr.AccountOwnerEmail = 'AccountOwnerEmail';
        cr.CustomerLevel = 'CustomerLevel';
        cr.CustomerName = 'CustomerName'; 
        cr.SiteName = 'SiteName';
        cr.Division = 'Division';
        cr.AvailableCreditLine = 'AvailableCreditLine';
        cr.TotalUnpaidAmount = 'TotalUnpaidAmount';
        cr.TotalAmountPastDue = 'TotalAmountPastDue';
        cr.CustomerCreditInfoString = 'CustomerCreditInfoString';
        cr.StrOperation = 'Create';
        cr.resellers ='12345';
        cr.CollectorName ='test Collector|test@test.com';
        cr.CustomerCreditInfoString ='USD:10:20:30|GBP:20:30:40';
        cr.TapCustomerType ='Customer';
        cr.TapCustomerSubType ='Tap SUbType';
        cr.customershortname ='testname';
        cr.discount ='1234';
        cr.autorenewal ='Y';
        cr.CustomerReference='testvalue';
        cr.CPIRPIReqd ='Y';
        cr.attribute3='testvalue';
        cr.attribute4='testvalue';
        cr.EBSAccountNumber='12345';
        cr.CustomerCreditInfoString ='USD:10:20:30|GBP:20:30:40';
        cr.resellers='12345';
        CreateAccountfromEBS.CreateParty(cr);
        
        //CreateAccountfromEBS.RequestAddressData cra = new CreateAccountfromEBS.RequestAddressData();
        //GenerateTestData.createAccount();
        GenerateTestData.createAddress();
        cra.AddressID = GenerateTestData.adrs.Id; 
        cr.EnterpriseAccountNumber = '12345';
        cra.SiteName = 'Test site Name';
        cra.CustomerName = 'Test customer Name';
        cra.AddressLine1 = 'AddressLine1';
        cra.AddressLine2 = 'AddressLine2';
        cra.AddressLine3 = 'AddressLine 3';
        cra.AddressLine4 = 'AddressLine 4';
        cra.City = 'City';
        cra.County = 'County';
        cra.Country = 'Brazil';
        cra.State = 'State';
        cra.Zip = 'Zip';
        cra.RestrictedPartyIndicator = 'Test restricted party';
        cra.AnniversaryDate = Date.today() + 30;
        cra.TaxRegNumber = 'test tax';
        cra.BillTo = 'No';
        cra.ShipTo = 'No';
        cra.InstalledAt = 'No';
        cra.EndUser = 'No';
        cra.SellTo = 'No';
        cra.AccountID = '';
        cra.FCHPartySiteID = 'Test FCH';
        cra.EnterpriseAddressNumber = '';
        cra.EnterpriseMasterId = '';
        cra.AddressValidatorFlag = '';
        cra.StrOperation = 'Update';
        cra.Attribute1 = 'test attr1';
        cra.Attribute2 = 'test attr1';
        cra.Attribute3 = 'test attr1';
        cra.Attribute4 = 'test attr1';
        cra.Attribute5 = 'test attr1';
        cra.Attribute6 = 'test attr1';
        cra.Attribute7 = 'test attr1';
        cra.Attribute8 = 'test attr1';
        cra.Attribute9 = 'test attr1';
        cra.Attribute10 = 'test attr1';  
        cra.industry ='12345';
        cra.Salesperson ='123456';
        cra.pricelistid ='123456';
        cra.activationemail ='test@test.com';
        cra.Active ='Y';
        cra.TapPOSFlag = 'Y';
        cra.TaxNumber ='12345';
        cra.custpayablecontacttype1 ='12345';
        cra.custpayablecontacttype2 ='12345';
        cra.custpayablecontacttype3 ='12345';
        cra.custpayablecontacttype4 ='12345';
        cra.custpayablecontactvalue1 ='12345';
        cra.custpayablecontactvalue2 ='12345';
        cra.custpayablecontactvalue3 ='12345';
        cra.custpayablecontactvalue4 ='12345';
        cra.BillToLocation ='6743343';
        cra.ShipToLocation = '4343232';
        cra.TapInvGroupingOption = '232233';
        
        
        
        List<CreateAccountfromEBS.RequestAddressdata> craList = new List<CreateAccountfromEBS.RequestAddressdata>();
        craList.add(cra);
        CreateAccountfromEBS.CreatePartyAddresses(craList);
        
    }
    
    static testmethod void testCreateAccountfromEBSUpdate(){
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        CreateAccountfromEBS.ResponseWrapper crw = new CreateAccountfromEBS.ResponseWrapper(); 
        CreateAccountfromEBS.RequestContactData crc= new CreateAccountfromEBS.RequestContactData();
        CreateAccountfromEBS.RequestAddressData cra = new CreateAccountfromEBS.RequestAddressData();                   
        GenerateTestData.createAccount();
        cr.AccountID = GenerateTestData.acct.Id;
        cr.AccountName = 'Test Account';
        cr.CollectorName = 'test collector name';
        cr.Email = 'test.email@gmail.com';
        cr.DUNS = 'test duns';
        cr.PrimaryRegion = 'test primary region'; 
        cr.RestrictedPartyIndicator = 'test RestrictedPartyIndicator';
        cr.DoNotMerge = true;
        cr.FchReportingEntityPartyID = '123';
        cr.VerticalClassification = 'VerticalClassification'; 
        cr.CreditStatus = 'CreditStatus';
        cr.EnterpriseAccountNumber = '12345';
        cr.FchPartyID = 'test Id'; 
        cr.FchReportingEntityNumber = 'FchReportingEntityNumber';
        cr.EBSPaymentTerm = 'EBSPaymentTerm';
        CreateAccountfromEBS.RequestAddressData rad = new CreateAccountfromEBS.RequestAddressData();
        cr.addresses = new List<CreateAccountfromEBS.RequestAddressData>();
        cr.addresses.add(rad);
        CreateAccountfromEBS.RequestContactData rcd = new CreateAccountfromEBS.RequestContactData();
        cr.contacts = new List<CreateAccountfromEBS.RequestContactData>();
        cr.contacts.add(rcd);
        cr.IsDeleted = 'IsDeleted';
        cr.Country = 'test country';
        cr.GlobalOptput = 'GlobalOptput';
        cr.LifeCycelstage = 'LifeCycelstage';
        cr.CustomerType = 'CustomerType';
        cr.SalesRepBusinessArea = 'SalesRepBusinessArea';
        cr.SalesRepUserDivision = 'SalesRepUserDivision';
        cr.SalesRepLegalEntity = 'SalesRepLegalEntity';
        cr.SalesRepSalesRegion = 'SalesRepSalesRegion';
        cr.AccountOwnerEmail = 'AccountOwnerEmail';
        cr.CustomerLevel = 'CustomerLevel';
        cr.CustomerName = 'CustomerName'; 
        cr.SiteName = 'SiteName';
        cr.Division = 'Division';
        cr.AvailableCreditLine = 'AvailableCreditLine';
        cr.TotalUnpaidAmount = 'TotalUnpaidAmount';
        cr.TotalAmountPastDue = 'TotalAmountPastDue';
        cr.CustomerCreditInfoString = 'CustomerCreditInfoString';
        cr.StrOperation = 'Update';
        cr.TapCustomerType ='Customer';
        cr.TapCustomerSubType ='Tap SUbType';
        cr.customershortname ='testname';
        cr.discount ='1234';
        cr.autorenewal ='Y';
        cr.CustomerReference='testvalue';
        cr.CPIRPIReqd ='Y';
        cr.attribute3='testvalue';
        cr.attribute4='testvalue';
        cr.EBSAccountNumber='12345';
        cr.CustomerCreditInfoString ='USD:10:20:30|GBP:20:30:40';
        cr.resellers='12345';
        CreateAccountfromEBS.CreateParty(cr);
    }
    
    static testmethod void testCreateAccountfromEBSnoop(){
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        CreateAccountfromEBS.ResponseWrapper crw = new CreateAccountfromEBS.ResponseWrapper(); 
        CreateAccountfromEBS.RequestContactData crc= new CreateAccountfromEBS.RequestContactData();
        CreateAccountfromEBS.RequestAddressData cra = new CreateAccountfromEBS.RequestAddressData();                   
        
        cr.AccountID = '';
        cr.AccountName = 'Test Account';
        cr.CollectorName = 'test collector name';
        cr.Email = 'test.email@gmail.com';
        cr.DUNS = 'test duns';
        cr.PrimaryRegion = 'test primary region'; 
        cr.RestrictedPartyIndicator = 'test RestrictedPartyIndicator';
        cr.DoNotMerge = true;
        cr.FchReportingEntityPartyID = '123';
        cr.VerticalClassification = 'VerticalClassification'; 
        cr.CreditStatus = 'CreditStatus';
        cr.EnterpriseAccountNumber = '12345';
        cr.FchPartyID = 'test Id'; 
        cr.FchReportingEntityNumber = 'FchReportingEntityNumber';
        cr.EBSPaymentTerm = 'EBSPaymentTerm';
        CreateAccountfromEBS.RequestAddressData rad = new CreateAccountfromEBS.RequestAddressData();
        cr.addresses = new List<CreateAccountfromEBS.RequestAddressData>();
        cr.addresses.add(rad);
        CreateAccountfromEBS.RequestContactData rcd = new CreateAccountfromEBS.RequestContactData();
        cr.contacts = new List<CreateAccountfromEBS.RequestContactData>();
        cr.contacts.add(rcd);
        
        cr.IsDeleted = 'IsDeleted';
        cr.Country = 'test country';
        cr.GlobalOptput = 'GlobalOptput';
        cr.LifeCycelstage = 'LifeCycelstage';
        cr.CustomerType = 'CustomerType';
        cr.SalesRepBusinessArea = 'SalesRepBusinessArea';
        cr.SalesRepUserDivision = 'SalesRepUserDivision';
        cr.SalesRepLegalEntity = 'SalesRepLegalEntity';
        cr.SalesRepSalesRegion = 'SalesRepSalesRegion';
        cr.AccountOwnerEmail = 'AccountOwnerEmail';
        cr.CustomerLevel = 'CustomerLevel';
        cr.CustomerName = 'CustomerName'; 
        cr.SiteName = 'SiteName';
        cr.Division = 'Division';
        cr.AvailableCreditLine = 'AvailableCreditLine';
        cr.TotalUnpaidAmount = 'TotalUnpaidAmount';
        cr.TotalAmountPastDue = 'TotalAmountPastDue';
        cr.CustomerCreditInfoString = 'CustomerCreditInfoString';
        cr.StrOperation = 'Update';
        CreateAccountfromEBS.CreateParty(cr);
    }
    
    
    static testmethod void testCreateAccountfromEBSnoop1(){
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        CreateAccountfromEBS.ResponseWrapper crw = new CreateAccountfromEBS.ResponseWrapper(); 
        CreateAccountfromEBS.RequestContactData crc= new CreateAccountfromEBS.RequestContactData();
        CreateAccountfromEBS.RequestAddressData cra = new CreateAccountfromEBS.RequestAddressData();                   
        
        cr.AccountID = '';
        cr.AccountName = 'Test Account';
        cr.CollectorName = 'test collector name';
        cr.Email = 'test.email@gmail.com';
        cr.DUNS = 'test duns';
        cr.PrimaryRegion = 'test primary region'; 
        cr.RestrictedPartyIndicator = 'test RestrictedPartyIndicator';
        cr.DoNotMerge = true;
        cr.FchReportingEntityPartyID = '123';
        cr.VerticalClassification = 'VerticalClassification'; 
        cr.CreditStatus = 'CreditStatus';
        cr.EnterpriseAccountNumber = '12345';
        cr.FchPartyID = 'test Id'; 
        cr.FchReportingEntityNumber = 'FchReportingEntityNumber';
        cr.EBSPaymentTerm = 'EBSPaymentTerm';
        CreateAccountfromEBS.RequestAddressData rad = new CreateAccountfromEBS.RequestAddressData();
        cr.addresses = new List<CreateAccountfromEBS.RequestAddressData>();
        cr.addresses.add(rad);
        CreateAccountfromEBS.RequestContactData rcd = new CreateAccountfromEBS.RequestContactData();
        cr.contacts = new List<CreateAccountfromEBS.RequestContactData>();
        cr.contacts.add(rcd);
        
        cr.IsDeleted = 'IsDeleted';
        cr.Country = 'test country';
        cr.GlobalOptput = 'GlobalOptput';
        cr.LifeCycelstage = 'LifeCycelstage';
        cr.CustomerType = 'CustomerType';
        cr.SalesRepBusinessArea = 'SalesRepBusinessArea';
        cr.SalesRepUserDivision = 'SalesRepUserDivision';
        cr.SalesRepLegalEntity = 'SalesRepLegalEntity';
        cr.SalesRepSalesRegion = 'SalesRepSalesRegion';
        cr.AccountOwnerEmail = 'AccountOwnerEmail';
        cr.CustomerLevel = 'CustomerLevel';
        cr.CustomerName = 'CustomerName'; 
        cr.SiteName = 'SiteName';
        cr.Division = 'Division';
        cr.AvailableCreditLine = 'AvailableCreditLine';
        cr.TotalUnpaidAmount = 'TotalUnpaidAmount';
        cr.TotalAmountPastDue = 'TotalAmountPastDue';
        cr.CustomerCreditInfoString = '';
        cr.StrOperation = 'Update';
        CreateAccountfromEBS.CreateParty(cr);
    }
    
    static testmethod void CreatePartyAddressesTestMeth1(){
         CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        CreateAccountfromEBS.RequestAddressData cra = new CreateAccountfromEBS.RequestAddressData();
        cra.AddressID = ''; 
        cra.SiteName = 'Test site Name';
        cra.CustomerName = 'Test customer Name';
        cra.AddressLine1 = 'Test AddressLine1';
        cra.AddressLine2 = 'Test AddressLine2';
        cra.AddressLine3 = 'Test AddressLine 3';
        cra.AddressLine4 = 'Test AddressLine 4';
        cra.City = 'Test City';
        cra.County = 'Test County';
        cra.Country = 'Test Country';
        cra.State = 'Test State';
        cra.Zip = 'Test Zip';
        cr.EnterpriseAccountNumber = '12345';
        cra.RestrictedPartyIndicator = 'Test restricted party';
        cra.AnniversaryDate = Date.today() + 30;
        cra.TaxRegNumber = 'test tax';
        cra.BillTo = 'Yes';
        cra.ShipTo = 'Yes';
        cra.InstalledAt = 'Yes';
        cra.EndUser = 'Yes';
        cra.SellTo = 'Yes';
        cra.AccountID = 'test acc';
        cra.FCHPartySiteID = 'Test FCH';
        cra.EnterpriseAddressNumber = 'Test Enterprise';
        cra.EnterpriseMasterId = 'test id';
        cra.AddressValidatorFlag = 'test adr';
        
        cra.StrOperation = 'Create';
        cra.Attribute1 = 'test attr1';
        cra.Attribute2 = 'test attr1';
        cra.Attribute3 = 'test attr1';
        cra.Attribute4 = 'test attr1';
        cra.Attribute5 = 'test attr1';
        cra.Attribute6 = 'test attr1';
        cra.Attribute7 = 'test attr1';
        cra.Attribute8 = 'test attr1';
        cra.Attribute9 = 'test attr1';
        cra.Attribute10 = 'test attr1';  
        cra.industry ='12345';
        cra.Salesperson ='123456';
        cra.pricelistid ='123456';
        cra.activationemail ='test@test.com';
        cra.Active ='Y';
        cra.TapPOSFlag = 'Y';
        cra.TaxNumber ='12345';
        cra.custpayablecontacttype1 ='12345';
        cra.custpayablecontacttype2 ='12345';
        cra.custpayablecontacttype3 ='12345';
        cra.custpayablecontacttype4 ='12345';
        cra.custpayablecontactvalue1 ='12345';
        cra.custpayablecontactvalue2 ='12345';
        cra.custpayablecontactvalue3 ='12345';
        cra.custpayablecontactvalue4 ='12345';
        cra.BillToLocation ='6743343';
        cra.ShipToLocation = '4343232';
        cra.TapInvGroupingOption = '232233';
        
        List<CreateAccountfromEBS.RequestAddressdata> craList = new List<CreateAccountfromEBS.RequestAddressdata>();
        craList.add(cra);
        CreateAccountfromEBS.CreatePartyAddresses(craList);
    }
    
    static testmethod void CreatePartyAddressesTestMeth2(){
     CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        CreateAccountfromEBS.RequestAddressData cra = new CreateAccountfromEBS.RequestAddressData();
        cra.AddressID = ''; 
        cra.SiteName = 'Test site Name';
        cra.CustomerName = 'Test customer Name';
        cra.AddressLine1 = 'AddressLine1';
        cra.AddressLine2 = 'AddressLine2';
        cra.AddressLine3 = 'AddressLine 3';
        cra.AddressLine4 = 'AddressLine 4';
        cr.EnterpriseAccountNumber = '12345';
        cra.City = 'City';
        cra.County = 'County';
        cra.Country = 'Country';
        cra.State = 'State';
        cra.Zip = 'Zip';
        cra.RestrictedPartyIndicator = 'Test restricted party';
        cra.AnniversaryDate = Date.today() + 30;
        cra.TaxRegNumber = 'test tax';
        cra.BillTo = 'No';
        cra.ShipTo = 'No';
        cra.InstalledAt = 'No';
        cra.EndUser = 'No';
        cra.SellTo = 'No';
        cra.AccountID = '';
        cra.FCHPartySiteID = 'Test FCH';
        cra.EnterpriseAddressNumber = '';
        cra.EnterpriseMasterId = '';
        cra.AddressValidatorFlag = '';
        cra.StrOperation = 'Create';
        cra.Attribute1 = 'test attr1';
        cra.Attribute2 = 'test attr1';
        cra.Attribute3 = 'test attr1';
        cra.Attribute4 = 'test attr1';
        cra.Attribute5 = 'test attr1';
        cra.Attribute6 = 'test attr1';
        cra.Attribute7 = 'test attr1';
        cra.Attribute8 = 'test attr1';
        cra.Attribute9 = 'test attr1';
        cra.Attribute10 = 'test attr1';  
        cra.industry ='12345';
        cra.Salesperson ='123456';
        cra.pricelistid ='123456';
        cra.activationemail ='test@test.com';
        cra.Active ='Y';
        cra.TapPOSFlag = 'Y';
        cra.TaxNumber ='12345';
        cra.custpayablecontacttype1 ='12345';
        cra.custpayablecontacttype2 ='12345';
        cra.custpayablecontacttype3 ='12345';
        cra.custpayablecontacttype4 ='12345';
        cra.custpayablecontactvalue1 ='12345';
        cra.custpayablecontactvalue2 ='12345';
        cra.custpayablecontactvalue3 ='12345';
        cra.custpayablecontactvalue4 ='12345';
        cra.BillToLocation ='6743343';
        cra.ShipToLocation = '4343232';
        cra.TapInvGroupingOption = '232233';
        List<CreateAccountfromEBS.RequestAddressdata> craList = new List<CreateAccountfromEBS.RequestAddressdata>();
        craList.add(cra);
        CreateAccountfromEBS.CreatePartyAddresses(craList);
    }
    
    static testmethod void CreatePartyAddressesTestMeth3(){
     CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        CreateAccountfromEBS.RequestAddressData cra = new CreateAccountfromEBS.RequestAddressData();
        GenerateTestData.createAccount();
        GenerateTestData.createAddress();
        cra.AddressID = GenerateTestData.adrs.Id; 
        cr.EnterpriseAccountNumber = '12345';
        cra.SiteName = 'Test site Name';
        cra.CustomerName = 'Test customer Name';
        cra.AddressLine1 = 'AddressLine1';
        cra.AddressLine2 = 'AddressLine2';
        cra.AddressLine3 = 'AddressLine 3';
        cra.AddressLine4 = 'AddressLine 4';
        cra.City = 'City';
        cra.County = 'County';
        cra.Country = 'Brazil';
        cra.State = 'State';
        cra.Zip = 'Zip';
        cra.RestrictedPartyIndicator = 'Test restricted party';
        cra.AnniversaryDate = Date.today() + 30;
        cra.TaxRegNumber = 'test tax';
        cra.BillTo = 'No';
        cra.ShipTo = 'No';
        cra.InstalledAt = 'No';
        cra.EndUser = 'No';
        cra.SellTo = 'No';
        cra.AccountID = '';
        cra.FCHPartySiteID = 'Test FCH';
        cra.EnterpriseAddressNumber = '';
        cra.EnterpriseMasterId = '';
        cra.AddressValidatorFlag = '';
        cra.StrOperation = 'Update';
        cra.Attribute1 = 'test attr1';
        cra.Attribute2 = 'test attr1';
        cra.Attribute3 = 'test attr1';
        cra.Attribute4 = 'test attr1';
        cra.Attribute5 = 'test attr1';
        cra.Attribute6 = 'test attr1';
        cra.Attribute7 = 'test attr1';
        cra.Attribute8 = 'test attr1';
        cra.Attribute9 = 'test attr1';
        cra.Attribute10 = 'test attr1';  
        cra.industry ='12345';
        cra.Salesperson ='123456';
        cra.pricelistid ='123456';
        cra.activationemail ='test@test.com';
        cra.Active ='Y';
        cra.TapPOSFlag = 'Y';
        cra.TaxNumber ='12345';
        cra.custpayablecontacttype1 ='12345';
        cra.custpayablecontacttype2 ='12345';
        cra.custpayablecontacttype3 ='12345';
        cra.custpayablecontacttype4 ='12345';
        cra.custpayablecontactvalue1 ='12345';
        cra.custpayablecontactvalue2 ='12345';
        cra.custpayablecontactvalue3 ='12345';
        cra.custpayablecontactvalue4 ='12345';
        cra.BillToLocation ='6743343';
        cra.ShipToLocation = '4343232';
        cra.TapInvGroupingOption = '232233';
        
        
        
        List<CreateAccountfromEBS.RequestAddressdata> craList = new List<CreateAccountfromEBS.RequestAddressdata>();
        craList.add(cra);
        CreateAccountfromEBS.CreatePartyAddresses(craList);
    }
    
    static testmethod void CreatePartyAddressesTestMeth4(){
     CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        CreateAccountfromEBS.RequestAddressData cra = new CreateAccountfromEBS.RequestAddressData();
        GenerateTestData.createAccount();
        GenerateTestData.createAddress();
        cra.AddressID = GenerateTestData.adrs.Id; 
        cra.SiteName = 'Test site Name';
        cra.CustomerName = 'Test customer Name';
        cra.AddressLine1 = 'AddressLine1';
        cra.AddressLine2 = 'AddressLine2';
        cra.AddressLine3 = 'AddressLine 3';
        cra.AddressLine4 = 'AddressLine 4';
        cr.EnterpriseAccountNumber = '12345';
        cra.City = 'City';
        cra.County = 'County';
        cra.Country = 'Country';
        cra.State = 'State';
        cra.Zip = 'Zip';
        cra.RestrictedPartyIndicator = 'Test restricted party';
        cra.AnniversaryDate = Date.today() + 30;
        cra.TaxRegNumber = 'test tax';
        cra.BillTo = 'Yes';
        cra.ShipTo = 'Yes';
        cra.InstalledAt = 'Yes';
        cra.EndUser = 'Yes';
        cra.SellTo = 'Yes';
        cra.AccountID = '';
        cra.FCHPartySiteID = 'Test FCH';
        cra.EnterpriseAddressNumber = '';
        cra.EnterpriseMasterId = '';
        cra.AddressValidatorFlag = '';
        cra.StrOperation = 'Update';
        cra.Attribute1 = 'test attr1';
        cra.Attribute2 = 'test attr1';
        cra.Attribute3 = 'test attr1';
        cra.Attribute4 = 'test attr1';
        cra.Attribute5 = 'test attr1';
        cra.Attribute6 = 'test attr1';
        cra.Attribute7 = 'test attr1';
        cra.Attribute8 = 'test attr1';
        cra.Attribute9 = 'test attr1';
        cra.Attribute10 = 'test attr1';  
        cra.industry ='12345';
        cra.Salesperson ='123456';
        cra.pricelistid ='123456';
        cra.activationemail ='test@test.com';
        cra.Active ='Y';
        cra.TapPOSFlag = 'Y';
        cra.TaxNumber ='12345';
        cra.custpayablecontacttype1 ='12345';
        cra.custpayablecontacttype2 ='12345';
        cra.custpayablecontacttype3 ='12345';
        cra.custpayablecontacttype4 ='12345';
        cra.custpayablecontactvalue1 ='12345';
        cra.custpayablecontactvalue2 ='12345';
        cra.custpayablecontactvalue3 ='12345';
        cra.custpayablecontactvalue4 ='12345';
        cra.BillToLocation ='6743343';
        cra.ShipToLocation = '4343232';
        cra.TapInvGroupingOption = '232233';
        List<CreateAccountfromEBS.RequestAddressdata> craList = new List<CreateAccountfromEBS.RequestAddressdata>();
        craList.add(cra);
        CreateAccountfromEBS.CreatePartyAddresses(craList);
    }
    
    
    
    static testmethod void CreatePartyContactMeth1(){
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        //CreateAccountfromEBS ca = new CreateAccountfromEBS();
        CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        CreateAccountfromEBS.RequestContactData cra = new CreateAccountfromEBS.RequestContactData();
        List<CreateAccountfromEBS.RequestContactData> requestParamList = new List<CreateAccountfromEBS.RequestContactData>();
        
                GenerateTestData.createAccount();
        cr.AccountID = GenerateTestData.acct.Id;
        cr.AccountName = 'Test Account';
        cr.CollectorName = 'test collector name';
        cr.Email = 'test.email@gmail.com';
        cr.DUNS = 'test duns';
        cr.PrimaryRegion = 'test primary region'; 
        cr.RestrictedPartyIndicator = 'test RestrictedPartyIndicator';
        cr.DoNotMerge = true;
        cr.FchReportingEntityPartyID = '123';
        cr.VerticalClassification = 'VerticalClassification'; 
        cr.CreditStatus = 'CreditStatus';
        cr.EnterpriseAccountNumber = '12345';
        cr.FchPartyID = 'test Id'; 
        cr.FchReportingEntityNumber = 'FchReportingEntityNumber';
        cr.EBSPaymentTerm = 'EBSPaymentTerm';
        CreateAccountfromEBS.RequestAddressData rad = new CreateAccountfromEBS.RequestAddressData();
        cr.addresses = new List<CreateAccountfromEBS.RequestAddressData>();
        cr.addresses.add(rad);
        CreateAccountfromEBS.RequestContactData rcd = new CreateAccountfromEBS.RequestContactData();
        cr.contacts = new List<CreateAccountfromEBS.RequestContactData>();
        cr.contacts.add(rcd);
        cr.IsDeleted = 'IsDeleted';
        cr.Country = 'test country';
        cr.GlobalOptput = 'GlobalOptput';
        cr.LifeCycelstage = 'LifeCycelstage';
        cr.CustomerType = 'CustomerType';
        cr.SalesRepBusinessArea = 'SalesRepBusinessArea';
        cr.SalesRepUserDivision = 'SalesRepUserDivision';
        cr.SalesRepLegalEntity = 'SalesRepLegalEntity';
        cr.SalesRepSalesRegion = 'SalesRepSalesRegion';
        cr.AccountOwnerEmail = 'AccountOwnerEmail';
        cr.CustomerLevel = 'CustomerLevel';
        cr.CustomerName = 'CustomerName'; 
        cr.SiteName = 'SiteName';
        cr.Division = 'Division';
        cr.AvailableCreditLine = 'AvailableCreditLine';
        cr.TotalUnpaidAmount = 'TotalUnpaidAmount';
        cr.TotalAmountPastDue = 'TotalAmountPastDue';
        cr.CustomerCreditInfoString = 'CustomerCreditInfoString';
        cr.StrOperation = 'Update';
        cr.TapCustomerType ='Customer';
        cr.TapCustomerSubType ='Tap SUbType';
        cr.customershortname ='testname';
        cr.discount ='1234';
        cr.autorenewal ='Y';
        cr.CustomerReference='testvalue';
        cr.CPIRPIReqd ='Y';
        cr.attribute3='testvalue';
        cr.attribute4='testvalue';
        cr.EBSAccountNumber='12345';
        cr.CustomerCreditInfoString ='USD:10:20:30|GBP:20:30:40';
        CreateAccountfromEBS.CreateParty(cr);
        
        GenerateTestData.createAccount();
        GenerateTestData.createContact();
        cra.ContactID = GenerateTestData.ct.Id;
        cra.AccountID = GenerateTestData.acct.Id;
        cra.FirstName = 'fname';
        cra.LastName = GenerateTestData.ct.LastName;
        cra.Email = GenerateTestData.ct.Email;
        cra.CellPhone = '123';
        cra.Fax = 'fax';
        cra.HomePhone = '123';
        cra.Phone = '12345';
        cra.PreferredLanguage = GenerateTestData.ct.Preferred_Language__c;
        cra.IsPrimary = true;
        cra.BillTo = true;
        cra.ShipTo = true;
        cra.Acknowledgement = true;
        cra.Invoice = true;
        cra.Legal = true;
        cra.FchContactID = 'test fchcontactid';
        cra.FchCellPhoneID = 'phone id';
        cra.FchFaxID = 'fax id';
        cra.FchHomePhoneID = 'fch phone id';
        cra.FchPhoneID = 'fchid';
        cra.FchEmailID = 'emailid';
        cra.EnterpriseContactNumber = 'EnterpriseContactNumber';
        cra.EnterpriseMasterId = 'EnterpriseMasterId';
        cra.StrOperation = 'Create';
        requestParamList.add(cra);
        
        CreateAccountfromEBS.CreatePartyContact(requestParamList);
    }
    
    static testmethod void CreatePartyContactMeth2(){
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        CreateAccountfromEBS.RequestContactData cra = new CreateAccountfromEBS.RequestContactData();
         CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        List<CreateAccountfromEBS.RequestContactData> requestParamList = new List<CreateAccountfromEBS.RequestContactData>();
        GenerateTestData.createAccount();
        GenerateTestData.createContact();
         GenerateTestData.createAccount();
        cr.AccountID = GenerateTestData.acct.Id;
        cr.AccountName = 'Test Account';
        cr.CollectorName = 'test collector name';
        cr.Email = 'test.email@gmail.com';
        cr.DUNS = 'test duns';
        cr.PrimaryRegion = 'test primary region'; 
        cr.RestrictedPartyIndicator = 'test RestrictedPartyIndicator';
        cr.DoNotMerge = true;
        cr.FchReportingEntityPartyID = '123';
        cr.VerticalClassification = 'VerticalClassification'; 
        cr.CreditStatus = 'CreditStatus';
        cr.EnterpriseAccountNumber = '12345';
        cr.FchPartyID = 'test Id'; 
        cr.FchReportingEntityNumber = 'FchReportingEntityNumber';
        cr.EBSPaymentTerm = 'EBSPaymentTerm';
        CreateAccountfromEBS.RequestAddressData rad = new CreateAccountfromEBS.RequestAddressData();
        cr.addresses = new List<CreateAccountfromEBS.RequestAddressData>();
        cr.addresses.add(rad);
        CreateAccountfromEBS.RequestContactData rcd = new CreateAccountfromEBS.RequestContactData();
        cr.contacts = new List<CreateAccountfromEBS.RequestContactData>();
        cr.contacts.add(rcd);
        cr.IsDeleted = 'IsDeleted';
        cr.Country = 'test country';
        cr.GlobalOptput = 'GlobalOptput';
        cr.LifeCycelstage = 'LifeCycelstage';
        cr.CustomerType = 'CustomerType';
        cr.SalesRepBusinessArea = 'SalesRepBusinessArea';
        cr.SalesRepUserDivision = 'SalesRepUserDivision';
        cr.SalesRepLegalEntity = 'SalesRepLegalEntity';
        cr.SalesRepSalesRegion = 'SalesRepSalesRegion';
        cr.AccountOwnerEmail = 'AccountOwnerEmail';
        cr.CustomerLevel = 'CustomerLevel';
        cr.CustomerName = 'CustomerName'; 
        cr.SiteName = 'SiteName';
        cr.Division = 'Division';
        cr.AvailableCreditLine = 'AvailableCreditLine';
        cr.TotalUnpaidAmount = 'TotalUnpaidAmount';
        cr.TotalAmountPastDue = 'TotalAmountPastDue';
        cr.CustomerCreditInfoString = 'CustomerCreditInfoString';
        cr.StrOperation = 'Update';
        cr.TapCustomerType ='Customer';
        cr.TapCustomerSubType ='Tap SUbType';
        cr.customershortname ='testname';
        cr.discount ='1234';
        cr.autorenewal ='Y';
        cr.CustomerReference='testvalue';
        cr.CPIRPIReqd ='Y';
        cr.attribute3='testvalue';
        cr.attribute4='testvalue';
        cr.EBSAccountNumber='12345';
        cr.CustomerCreditInfoString ='USD:10:20:30|GBP:20:30:40';
        cr.resellers='12345';
        CreateAccountfromEBS.CreateParty(cr);
        
        cra.ContactID = GenerateTestData.ct.Id;
        //cra.AccountID = GenerateTestData.acct.Id;
        cra.FirstName = 'fname';
        cra.LastName = GenerateTestData.ct.LastName;
        cra.Email = GenerateTestData.ct.Email;
        cra.CellPhone = '123';
        cra.Fax = 'fax';
        cra.HomePhone = '123';
        cra.Phone = '12345';
        cra.PreferredLanguage = GenerateTestData.ct.Preferred_Language__c;
        cra.IsPrimary = true;
        cra.BillTo = true;
        cra.ShipTo = true;
        cra.Acknowledgement = true;
        cra.Invoice = true;
        cra.Legal = true;
        cra.FchContactID = 'test fchcontactid';
        cra.FchCellPhoneID = 'phone id';
        cra.FchFaxID = 'fax id';
        cra.FchHomePhoneID = 'fch phone id';
        cra.FchPhoneID = 'fchid';
        cra.FchEmailID = 'emailid';
        cra.EnterpriseContactNumber = 'EnterpriseContactNumber';
        cra.EnterpriseMasterId = 'EnterpriseMasterId';
        cra.StrOperation = 'Create';
        requestParamList.add(cra);
        CreateAccountfromEBS.CreatePartyContact(requestParamList);
    }
    
    static testmethod void CreatePartyContactMeth3(){
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        CreateAccountfromEBS.RequestContactData cra = new CreateAccountfromEBS.RequestContactData();
         CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        List<CreateAccountfromEBS.RequestContactData> requestParamList = new List<CreateAccountfromEBS.RequestContactData>();
        GenerateTestData.createAccount();
        GenerateTestData.createContact();
         GenerateTestData.createAccount();
        cr.AccountID = GenerateTestData.acct.Id;
        cr.AccountName = 'Test Account';
        cr.CollectorName = 'test collector name';
        cr.Email = 'test.email@gmail.com';
        cr.DUNS = 'test duns';
        cr.PrimaryRegion = 'test primary region'; 
        cr.RestrictedPartyIndicator = 'test RestrictedPartyIndicator';
        cr.DoNotMerge = true;
        cr.FchReportingEntityPartyID = '123';
        cr.VerticalClassification = 'VerticalClassification'; 
        cr.CreditStatus = 'CreditStatus';
        cr.EnterpriseAccountNumber = '12345';
        cr.FchPartyID = 'test Id'; 
        cr.FchReportingEntityNumber = 'FchReportingEntityNumber';
        cr.EBSPaymentTerm = 'EBSPaymentTerm';
        CreateAccountfromEBS.RequestAddressData rad = new CreateAccountfromEBS.RequestAddressData();
        cr.addresses = new List<CreateAccountfromEBS.RequestAddressData>();
        cr.addresses.add(rad);
        CreateAccountfromEBS.RequestContactData rcd = new CreateAccountfromEBS.RequestContactData();
        cr.contacts = new List<CreateAccountfromEBS.RequestContactData>();
        cr.contacts.add(rcd);
        cr.IsDeleted = 'IsDeleted';
        cr.Country = 'test country';
        cr.GlobalOptput = 'GlobalOptput';
        cr.LifeCycelstage = 'LifeCycelstage';
        cr.CustomerType = 'CustomerType';
        cr.SalesRepBusinessArea = 'SalesRepBusinessArea';
        cr.SalesRepUserDivision = 'SalesRepUserDivision';
        cr.SalesRepLegalEntity = 'SalesRepLegalEntity';
        cr.SalesRepSalesRegion = 'SalesRepSalesRegion';
        cr.AccountOwnerEmail = 'AccountOwnerEmail';
        cr.CustomerLevel = 'CustomerLevel';
        cr.CustomerName = 'CustomerName'; 
        cr.SiteName = 'SiteName';
        cr.Division = 'Division';
        cr.AvailableCreditLine = 'AvailableCreditLine';
        cr.TotalUnpaidAmount = 'TotalUnpaidAmount';
        cr.TotalAmountPastDue = 'TotalAmountPastDue';
        cr.CustomerCreditInfoString = 'CustomerCreditInfoString';
        cr.StrOperation = 'Update';
        cr.TapCustomerType ='Customer';
        cr.TapCustomerSubType ='Tap SUbType';
        cr.customershortname ='testname';
        cr.discount ='1234';
        cr.autorenewal ='Y';
        cr.CustomerReference='testvalue';
        cr.CPIRPIReqd ='Y';
        cr.attribute3='testvalue';
        cr.attribute4='testvalue';
        cr.EBSAccountNumber='12345';
        cr.CustomerCreditInfoString ='USD:10:20:30|GBP:20:30:40';
        cr.resellers='12345';
        CreateAccountfromEBS.CreateParty(cr);
        
        cra.ContactID = GenerateTestData.ct.Id;
        //cra.AccountID = GenerateTestData.acct.Id;
        cra.FirstName = 'fname';
        cra.LastName = GenerateTestData.ct.LastName;
        cra.Email = GenerateTestData.ct.Email;
        cra.CellPhone = '123';
        cra.Fax = 'fax';
        cra.HomePhone = '123';
        cra.Phone = '12345';
        cra.PreferredLanguage = GenerateTestData.ct.Preferred_Language__c;
        cra.IsPrimary = true;
        cra.BillTo = true;
        cra.ShipTo = true;
        cra.Acknowledgement = true;
        cra.Invoice = true;
        cra.Legal = true;
        cra.FchContactID = 'test fchcontactid';
        cra.FchCellPhoneID = 'phone id';
        cra.FchFaxID = 'fax id';
        cra.FchHomePhoneID = 'fch phone id';
        cra.FchPhoneID = 'fchid';
        cra.FchEmailID = 'emailid';
        cra.EnterpriseContactNumber = 'EnterpriseContactNumber';
        cra.EnterpriseMasterId = 'EnterpriseMasterId';
        cra.StrOperation = 'Update';
        requestParamList.add(cra);
        CreateAccountfromEBS.CreatePartyContact(requestParamList);
    }
    
    static testmethod void CreatePartyContactMeth4(){
        CreateAccountfromEBS ca = new CreateAccountfromEBS();
        
        CreateAccountfromEBS.RequestContactData cra = new CreateAccountfromEBS.RequestContactData();
         CreateAccountfromEBS.RequestAccountdata cr = new CreateAccountfromEBS.RequestAccountdata();
        List<CreateAccountfromEBS.RequestContactData> requestParamList = new List<CreateAccountfromEBS.RequestContactData>();
        GenerateTestData.createAccount();
        GenerateTestData.createContact();
        //cra.ContactID = GenerateTestData.ct.Id;
        //cra.AccountID = GenerateTestData.acct.Id;
        
         GenerateTestData.createAccount();
        cr.AccountID = GenerateTestData.acct.Id;
        cr.AccountName = 'Test Account';
        cr.CollectorName = 'test collector name';
        cr.Email = 'test.email@gmail.com';
        cr.DUNS = 'test duns';
        cr.PrimaryRegion = 'test primary region'; 
        cr.RestrictedPartyIndicator = 'test RestrictedPartyIndicator';
        cr.DoNotMerge = true;
        cr.FchReportingEntityPartyID = '123';
        cr.VerticalClassification = 'VerticalClassification'; 
        cr.CreditStatus = 'CreditStatus';
        cr.EnterpriseAccountNumber = '12345';
        cr.FchPartyID = 'test Id'; 
        cr.FchReportingEntityNumber = 'FchReportingEntityNumber';
        cr.EBSPaymentTerm = 'EBSPaymentTerm';
        CreateAccountfromEBS.RequestAddressData rad = new CreateAccountfromEBS.RequestAddressData();
        cr.addresses = new List<CreateAccountfromEBS.RequestAddressData>();
        cr.addresses.add(rad);
        CreateAccountfromEBS.RequestContactData rcd = new CreateAccountfromEBS.RequestContactData();
        cr.contacts = new List<CreateAccountfromEBS.RequestContactData>();
        cr.contacts.add(rcd);
        cr.IsDeleted = 'IsDeleted';
        cr.Country = 'test country';
        cr.GlobalOptput = 'GlobalOptput';
        cr.LifeCycelstage = 'LifeCycelstage';
        cr.CustomerType = 'CustomerType';
        cr.SalesRepBusinessArea = 'SalesRepBusinessArea';
        cr.SalesRepUserDivision = 'SalesRepUserDivision';
        cr.SalesRepLegalEntity = 'SalesRepLegalEntity';
        cr.SalesRepSalesRegion = 'SalesRepSalesRegion';
        cr.AccountOwnerEmail = 'AccountOwnerEmail';
        cr.CustomerLevel = 'CustomerLevel';
        cr.CustomerName = 'CustomerName'; 
        cr.SiteName = 'SiteName';
        cr.Division = 'Division';
        cr.AvailableCreditLine = 'AvailableCreditLine';
        cr.TotalUnpaidAmount = 'TotalUnpaidAmount';
        cr.TotalAmountPastDue = 'TotalAmountPastDue';
        cr.CustomerCreditInfoString = 'CustomerCreditInfoString';
        cr.StrOperation = 'Update';
        cr.TapCustomerType ='Customer';
        cr.TapCustomerSubType ='Tap SUbType';
        cr.customershortname ='testname';
        cr.discount ='1234';
        cr.autorenewal ='Y';
        cr.CustomerReference='testvalue';
        cr.CPIRPIReqd ='Y';
        cr.attribute3='testvalue';
        cr.attribute4='testvalue';
        cr.EBSAccountNumber='12345';
        cr.CustomerCreditInfoString ='USD:10:20:30|GBP:20:30:40';
        cr.resellers='12345';
        CreateAccountfromEBS.CreateParty(cr);
        
        cra.FirstName = 'fname';
        cra.LastName = GenerateTestData.ct.LastName;
        cra.Email = GenerateTestData.ct.Email;
        cra.CellPhone = '123';
        cra.Fax = 'fax';
        cra.HomePhone = '123';
        cra.Phone = '12345';
        cra.PreferredLanguage = GenerateTestData.ct.Preferred_Language__c;
        cra.IsPrimary = true;
        cra.BillTo = true;
        cra.ShipTo = true;
        cra.Acknowledgement = true;
        cra.Invoice = true;
        cra.Legal = true;
        cra.FchContactID = 'test fchcontactid';
        cra.FchCellPhoneID = 'phone id';
        cra.FchFaxID = 'fax id';
        cra.FchHomePhoneID = 'fch phone id';
        cra.FchPhoneID = 'fchid';
        cra.FchEmailID = 'emailid';
        cra.EnterpriseContactNumber = 'EnterpriseContactNumber';
        cra.EnterpriseMasterId = 'EnterpriseMasterId';
        cra.StrOperation = 'Update';
        requestParamList.add(cra);
        CreateAccountfromEBS.CreatePartyContact(requestParamList);
    }
    
}